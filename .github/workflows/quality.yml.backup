name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks every Monday at 9 AM
    - cron: '0 9 * * 1'

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  php-quality:
    name: PHP Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip
          coverage: xdebug
          tools: composer:v2, cs2pr

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install quality tools
        run: |
          composer require --dev squizlabs/php_codesniffer
          composer require --dev phpmd/phpmd
          composer require --dev phpstan/phpstan
          composer require --dev phpstan/phpstan-symfony
          composer require --dev phpstan/phpstan-doctrine
          composer require --dev rector/rector

      - name: PHP Code Sniffer
        run: |
          vendor/bin/phpcs --standard=PSR12 src/ --report=checkstyle | cs2pr

      - name: PHP Mess Detector
        run: |
          vendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unusedcode || true

      - name: PHPStan Analysis
        run: |
          vendor/bin/phpstan analyse src/ --level=8 --error-format=github

      - name: PHP Copy/Paste Detector
        run: |
          if [ ! -f vendor/bin/phpcpd ]; then
            composer require --dev sebastian/phpcpd
          fi
          vendor/bin/phpcpd src/ || true

      - name: Generate PHPStan baseline (if needed)
        run: |
          vendor/bin/phpstan analyse src/ --level=8 --generate-baseline || true

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install quality tools
        run: |
          npm install --save-dev eslint @eslint/js
          npm install --save-dev prettier
          npm install --save-dev stylelint stylelint-config-standard-scss

      - name: ESLint
        run: |
          npx eslint assets/scripts/ assets/controllers/ --format=github || true

      - name: Prettier check
        run: |
          npx prettier --check assets/scripts/ assets/controllers/ assets/styles/ || true

      - name: Stylelint
        run: |
          npx stylelint "assets/styles/**/*.scss" || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, zip
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Symfony Security Check
        run: |
          curl -H "Accept: text/plain" https://get.symfony.com/cli/installer | bash
          ~/.symfony5/bin/symfony check:security

      - name: Composer Security Audit
        run: composer audit

      - name: Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: npm Security Audit
        run: |
          npm ci
          npm audit --audit-level moderate

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'episciences-manager'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload Dependency Check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run tests with coverage
        run: |
          php bin/phpunit --coverage-clover coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  metrics:
    name: Code Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, zip

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install metrics tools
        run: |
          composer require --dev phpmetrics/phpmetrics
          composer require --dev phploc/phploc

      - name: PHP Lines of Code
        run: |
          if [ ! -f vendor/bin/phploc ]; then
            composer require --dev phploc/phploc
          fi
          vendor/bin/phploc src/

      - name: PHP Metrics
        run: |
          vendor/bin/phpmetrics --report-html=phpmetrics-report src/

      - name: Upload metrics report
        uses: actions/upload-artifact@v3
        with:
          name: phpmetrics-report
          path: phpmetrics-report/

  # Send notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [php-quality, frontend-quality, security-audit, dependency-check]
    if: always() && github.event_name == 'push'

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#quality'
          text: |
            Code Quality Check: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}