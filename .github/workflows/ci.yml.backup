name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, main_creer_projet_symfony ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip
          coverage: xdebug
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: PHP Code Sniffer
        run: |
          if [ ! -f vendor/bin/phpcs ]; then
            composer require --dev squizlabs/php_codesniffer
          fi
          vendor/bin/phpcs --standard=PSR12 src/ --ignore=src/Migrations/ || true

      - name: PHPStan Static Analysis
        run: |
          if [ ! -f vendor/bin/phpstan ]; then
            composer require --dev phpstan/phpstan
            composer require --dev phpstan/phpstan-symfony
          fi
          vendor/bin/phpstan analyse src/ --level=6 || true

      - name: Security Check
        run: |
          curl -H "Accept: text/plain" https://get.symfony.com/cli/installer | bash
          ~/.symfony5/bin/symfony check:security || true

  # Job 2: PHP Tests
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: episciences_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Create test environment file
        run: |
          cp .env .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/episciences_test?serverVersion=15&charset=utf8" >> .env.test
          echo "APP_ENV=test" >> .env.test

      - name: Create database and run migrations
        run: |
          php bin/console doctrine:database:create --env=test --no-interaction
          php bin/console doctrine:migrations:migrate --env=test --no-interaction || true
          php bin/console doctrine:schema:update --env=test --force || true

      - name: Run PHPUnit tests
        run: |
          php bin/phpunit --coverage-clover coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: php
          name: php-coverage

  # Job 3: Frontend Tests & Build
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          if [ ! -f node_modules/.bin/eslint ]; then
            npm install --save-dev eslint @eslint/js
          fi
          npx eslint assets/scripts/ assets/controllers/ || true

      - name: Build assets (development)
        run: npm run build

      - name: Build assets (production)
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-assets
          path: public/build/

  # Job 4: Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP-FPM image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/php-fpm/Dockerfile
          push: false
          tags: episciences-manager-php:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Apache image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/apache/Dockerfile
          push: false
          tags: episciences-manager-apache:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          echo "Testing Docker Compose configuration..."
          docker-compose config
          # docker-compose up -d --build
          # docker-compose down

  # Job 5: Deploy to staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: SSH to server, pull code, restart services
          echo "Deployment completed!"

  # Job 6: Deploy to production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment completed!"

  # Job 7: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'