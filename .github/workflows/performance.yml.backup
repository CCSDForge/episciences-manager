name: Performance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance tests every night at 2 AM
    - cron: '0 2 * * *'

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: episciences_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Install Node dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Configure environment
        run: |
          cp .env .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/episciences_test?serverVersion=15&charset=utf8" >> .env.test
          echo "APP_ENV=prod" >> .env.test

      - name: Setup database
        run: |
          php bin/console doctrine:database:create --env=test --no-interaction
          php bin/console doctrine:migrations:migrate --env=test --no-interaction || true
          php bin/console doctrine:schema:update --env=test --force || true

      - name: Start PHP server
        run: |
          php -S localhost:8000 -t public/ &
          sleep 5

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:8000
            http://localhost:8000/journal
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: .lighthouseci

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          # Create basic load test script
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 10 }, // Ramp up
              { duration: '5m', target: 10 }, // Stay at 10 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests under 2s
              http_req_failed: ['rate<0.1'],     // Error rate under 10%
            },
          };

          export default function () {
            const BASE_URL = __ENV.BASE_URL || 'https://staging.episciences-manager.example.com';
            
            // Test homepage
            let response = http.get(`${BASE_URL}/`);
            check(response, {
              'Homepage status is 200': (r) => r.status === 200,
              'Homepage loads in <2s': (r) => r.timings.duration < 2000,
            });

            sleep(1);

            // Test journal list
            response = http.get(`${BASE_URL}/journal`);
            check(response, {
              'Journal list status is 200': (r) => r.status === 200,
              'Journal list loads in <2s': (r) => r.timings.duration < 2000,
            });

            sleep(1);
          }
          EOF

          # Run the load test
          k6 run load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: ./results

  php-profiling:
    name: PHP Performance Profiling
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: episciences_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip, xdebug
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Configure environment
        run: |
          cp .env .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/episciences_test?serverVersion=15&charset=utf8" >> .env.test
          echo "APP_ENV=test" >> .env.test

      - name: Setup database
        run: |
          php bin/console doctrine:database:create --env=test --no-interaction
          php bin/console doctrine:migrations:migrate --env=test --no-interaction || true

      - name: Run performance tests
        run: |
          # Install PHPBench if not already present
          if [ ! -f vendor/bin/phpbench ]; then
            composer require --dev phpbench/phpbench
          fi

          # Create a simple performance test
          mkdir -p tests/Performance
          cat > tests/Performance/ReviewManagerBench.php << 'EOF'
          <?php

          namespace App\Tests\Performance;

          use App\Service\ReviewManager;
          use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

          class ReviewManagerBench extends KernelTestCase
          {
              private ReviewManager $reviewManager;

              public function setUp(): void
              {
                  self::bootKernel();
                  $this->reviewManager = static::getContainer()->get(ReviewManager::class);
              }

              /**
               * @Revs(100)
               * @Iterations(5)
               */
              public function benchGetAllReviewsForDisplay(): void
              {
                  $this->reviewManager->getAllReviewsForDisplay();
              }

              /**
               * @Revs(50)
               * @Iterations(3)
               */
              public function benchGetActiveReviewsCount(): void
              {
                  $this->reviewManager->getActiveReviewsCount();
              }
          }
          EOF

          # Run benchmarks
          vendor/bin/phpbench run tests/Performance/ --report=aggregate

      - name: Memory usage profiling
        run: |
          # Simple memory profiling script
          php -d memory_limit=256M -r "
          require 'vendor/autoload.php';
          \$kernel = new App\Kernel('test', false);
          \$kernel->boot();
          echo 'Peak memory: ' . number_format(memory_get_peak_usage(true) / 1024 / 1024, 2) . ' MB' . PHP_EOL;
          "

  database-performance:
    name: Database Performance
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: episciences_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: intl, opcache, pdo, pdo_pgsql, zip

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Configure environment
        run: |
          cp .env .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/episciences_test?serverVersion=15&charset=utf8" >> .env.test
          echo "APP_ENV=test" >> .env.test

      - name: Setup database
        run: |
          php bin/console doctrine:database:create --env=test --no-interaction
          php bin/console doctrine:migrations:migrate --env=test --no-interaction || true

      - name: Run database performance tests
        run: |
          # Test query performance
          php bin/console doctrine:query:sql "EXPLAIN ANALYZE SELECT * FROM review WHERE status = 1 AND is_new_front_switched = true;" --env=test

      - name: Check for missing indexes
        run: |
          # Simple query to check for slow queries (would need actual data)
          echo "Checking database performance..."
          php bin/console doctrine:query:sql "SELECT schemaname, tablename, attname, n_distinct, correlation FROM pg_stats WHERE tablename = 'review';" --env=test || true

  # Performance monitoring and alerts
  notify-performance:
    name: Performance Notifications
    runs-on: ubuntu-latest
    needs: [lighthouse, load-testing, php-profiling, database-performance]
    if: always() && github.event_name == 'schedule'

    steps:
      - name: Notify performance results
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#performance'
          text: |
            🚀 Performance Tests Results: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            
            Lighthouse: ${{ needs.lighthouse.result }}
            Load Testing: ${{ needs.load-testing.result }}
            PHP Profiling: ${{ needs.php-profiling.result }}
            Database Performance: ${{ needs.database-performance.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}